---
http_interactions:
- request:
    method: post
    uri: https://api.openai.com/v1/chat/completions
    body:
      encoding: UTF-8
      string: '{"model":"gpt-3.5-turbo-1106","response_format":{"type":"json_object"},"messages":[{"role":"system","content":"Take
        the following text and parse it into a JSON recipe object.\nThe recipe object
        should have the following attributes:\n- title\n- description\n- ingredients,
        as an array of objects, each including:\n-- ingredient name (string)\n-- quantity
        (number)\n-- unit (string), one of the following: grams, kilograms, ounces,
        pounds, milliliters, liters, teaspoons, tablespoons, cups, pints, quarts,
        gallons, pieces, slices, leaves, pinches, dashes\n\n- recipe_steps, as an
        array of objects, each containing:\n-- a description (string): the detailed
        description on how to complete the instruction (e.g. \"Preheat the oven to
        350 degrees Fahrenheit\")\n-- an instruction (string): a short sentence thath
        summarizes the step in 45 characters or less (e.g. \"Preheat the oven\")\n---
        Note: the \"instruction\" is a supposed to be a shortened version of the \"description\"
        that can be used as a title for the step.\n-- a step_number (integer), indicating
        the order of the step\n-- a list of ingredients, as an array of objects, with
        the same structure as the main ingredients array.\n\n\nIf a recipe step contains
        multiple actions in any part of the original text, please split them into
        separate recipe_steps.\nTypically this is identified by the word \"and\" or
        a comma between two actions (verbs).\nAlso if instructions are given in a
        paragraph separated by periods, please split them into separate recipe_steps.\n\n"},{"role":"system","content":"If
        the provided text is not a cooking recipe, please return the following JSON
        object:\n{\n  \"error\": \"The provided text is not a recipe. Please provide
        a recipe.\"\n}\n"},{"role":"user","content":"BROWN BUTTER SALTED CARAMEL CHOCOLATE
        CHUNK COOKIES\n★\n★\n★\n★\n★\n4.9 from 35 reviews\nAuthor: Erin Clarkson  Prep
        Time: 25 minutes  Cook Time: 40 minutes  Total Time: 1 hour 5 minutes  Yield:
        30 cookies 1x  Category: cookies  Method: baking  Cuisine: american\n PRINT
        RECIPE\n PIN RECIPE\nDESCRIPTION\nBrown Butter Salted Caramel Chocolate Chunk
        Cookies. Regular pantry staples are elevated to another level to give this
        cookie a ''fancy with only a little more effort'' vibe. Brown butter is stirred
        in with toasty muscovado sugar to form a perfect cookie dough, and then hard
        caramel shards and chocolate chunks are folded in to give the perfect amount
        of chocolate and caramel per bite. Finished with flaky sea salt, this is a
        super easy yet satisfying baking recipe.\n\nINGREDIENTS\nSCALE\n1X\n2X\n3X\n225g
        unsalted butter, straight from the fridge\n200g granulated sugar (for the
        caramel)\n150g muscovado sugar\n60g dark brown sugar\n100g granulated sugar\n2
        eggs, at room temperature\n1 tsp vanilla bean paste or vanilla extract\n330g
        all-purpose flour\n¾ tsp baking powder\n¾ tsp baking soda\n1 tsp kosher salt\n255g
        good quality dark chocolate, chopped\nFlaky Sea Salt for Finishing\nCook Mode
        Prevent your screen from going dark\nINSTRUCTIONS\n ON OFF\nPreheat the oven
        to 350˚f / 180˚c. Line 3-4 baking trays with parchment paper.\nMake the Brown
        Butter. Place the butter in a medium saucepan, and place over medium heat.
        Cook until the butter has melted, and then continue to cook, swirling the
        pan often, until the butter foams and turns golden brown and nutty - this
        should take 3-4 minutes. Measure out 175g of the brown butter into the bowl
        of a stand mixer. Allow to cool slightly.\n\nMake the caramel. Place the 200g
        granulated sugar into a medium saucepan and place over medium heat. Place
        a silicone mat on a heat resistant surface (I use my counter) or onto a baking
        tray, and have nearby. Place the sugar in a medium saucepan, and place over
        medium heat. Heat the sugar, stirring occasionally with a whisk, until all
        of the sugar has melted (the sugar will clump as you heat, but continue to
        stir - it will soon smooth out). Continue to cook the caramel until it is
        amber in colour and just beginning to smoke slightly. Immediately pour onto
        the prepared silicone mat, and leave to cool while you prepare the cookie
        dough.\n\nMake the cookie dough. Place the bowl with the brown butter onto
        the mixer, and fit with the paddle attachment. Mix the brown butter, muscovado
        sugar, dark brown sugar, and second measure of granulated sugar on medium
        speed until combined. Add the eggs one at a time, followed by the vanilla,
        then increase the mixer speed to high and beat for 2-3 minutes, until the
        mixture has lightened in colour and thickened.\n\nAdd the Dry Ingredients.
        In a medium bowl, sift together the flour, baking powder, baking soda, and
        salt. With the mixer off, add to the mixing bowl, then mix on low until just
        combined. Remove the bowl from the mixer and finish the incorporation of the
        dry ingredients by hand if needed - scrape down the bowl and ensure that all
        the mixture at the bottom of the bowl is fully incorporated.\n\nAdd the chocolate
        and caramel. Add the chopped chocolate to the bowl. Carefully peel the caramel
        sheet off the silicone mat, and place onto the chopping board. Using a sharp
        knife, cut into chunks ½” to ¾” or smaller in size - there will be some small
        shards, and larger pieces. Use caution as the shards will be sharp. Add the
        caramel shards to the bowl along with the chocolate, and mix briefly to combine.\n\nScoop
        the cookies. Using a two tablespoon scoop, place level scoop fulls of dough
        onto the prepared baking trays - 8 per tray works well for me, but I like
        to start with 6 just to make sure there will be enough space. Roll each into
        a ball and arrange on the trays, leaving ample room for spreading.\n\nBake
        the cookies. Bake the trays one at a time for 11-12 minutes, or until the
        cookies are puffed up and set around the edges. Remember that they will continue
        to cook a little once you remove them from the oven. If the cookies have lost
        their round shape a little in the oven due to the caramel, you can use a round
        cookie cutter slightly larger than the cookie to nudge it back into a circular
        shape. Sprinkle each cookie with coarse sea salt, then cool on the tray for
        10 minutes before transferring to a wire rack to cool completely.\n\nRepeat
        the baking process with the remaining cookies. Store leftovers in an airtight
        container at room temperature."}],"temperature":0.5}'
    headers:
      Content-Type:
      - application/json
      Authorization:
      - Bearer <API_KEY>
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
      Openai-Organization: "<SENSITIVE>"
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Tue, 02 Jan 2024 21:31:28 GMT
      Content-Type:
      - application/json
      Transfer-Encoding:
      - chunked
      Connection:
      - keep-alive
      Access-Control-Allow-Origin:
      - "*"
      Cache-Control:
      - no-cache, must-revalidate
      Openai-Model:
      - gpt-3.5-turbo-1106
      Openai-Organization:
      - user-1c6qkvaymbx4kybcuag9ndqy
      Openai-Processing-Ms:
      - '30688'
      Openai-Version:
      - '2020-10-01'
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      X-Ratelimit-Limit-Requests:
      - '10000'
      X-Ratelimit-Limit-Tokens:
      - '60000'
      X-Ratelimit-Limit-Tokens-Usage-Based:
      - '60000'
      X-Ratelimit-Remaining-Requests:
      - '9999'
      X-Ratelimit-Remaining-Tokens:
      - '58470'
      X-Ratelimit-Remaining-Tokens-Usage-Based:
      - '58470'
      X-Ratelimit-Reset-Requests:
      - 8.64s
      X-Ratelimit-Reset-Tokens:
      - 1.53s
      X-Ratelimit-Reset-Tokens-Usage-Based:
      - 1.53s
      X-Request-Id:
      - 36e81fb83d334a2532e42c3c3b5bb381
      Cf-Cache-Status:
      - DYNAMIC
      Set-Cookie:
      - __cf_bm=lIwM4LJVUMdf3ZfYf_6zvvWJsFvJDDB3gPe6k3o_pkE-1704231088-1-AaDVR+LnjEJ8ARoFK5/4ZSveX9zESgWOV8IBv5pYtDrorR+nTTq4sg4goZAxC5tJkZoWZQZFh0BuURxaOATXPkA=;
        path=/; expires=Tue, 02-Jan-24 22:01:28 GMT; domain=.api.openai.com; HttpOnly;
        Secure; SameSite=None
      - _cfuvid=.f9EvpFfbFOAz1Af.GenLWEmITMEvH9iaTjzXeSrgV0-1704231088518-0-604800000;
        path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None
      Server:
      - cloudflare
      Cf-Ray:
      - 83f61b2e2da1bf26-WAW
      Alt-Svc:
      - h3=":443"; ma=86400
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Tue, 02 Jan 2024 21:31:41 GMT
recorded_with: VCR 6.0.0
