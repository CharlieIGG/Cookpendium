version: "3.7"

volumes:
  app_node_modules: # Used to store the app's node modules...
  minio_data: # Used to store the minio data...

networks:
  backend:

services:
  # The migration processor container - we'll use this as the base for the rest
  # of the app service definitions:
  migration: &app
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    image: charlieigg/cookpendium:development
    entrypoint: /usr/src/bin/dev-entrypoint.sh
    volumes:
      # Mount the app code into the app containers at the "/usr/src" folder:
      - .:/usr/src

      # After mounting the app code, this replaces the local 'node_modules'
      # folder inside the container with a Docker volume. This is done for
      # several reasons:
      # - So we can run the frontend app either from the host (i.e. macOS) or
      #   using containers without having the host & container clobber the npm
      #   each other's packages, or avoid conflicting versions for macOS / Linux
      # - Helps when running on macOS/Windows to speed up the npm install from,
      #   zero, since a local volume bind on mac/win is noticeably slower than
      #   a Docker volume - and node module install is very susceptible to
      #   I/O performance
      - app_node_modules:/usr/src/node_modules
    networks:
      - backend

    # Keep the stdin open, so we can attach to our app container's process
    # and do things such as byebug, etc:
    stdin_open: true

    # Enable sending signals (CTRL+C, CTRL+P + CTRL+Q) into the container:
    tty: true

    # Link to our postgres and redis services, so they can be visible from our
    # app service containers:
    depends_on:
      - postgres
      # - redis

    # The command we want to execute by default when running the container
    command: rails db:migrate

    # Specify environment variables available for our app containers. We'll
    # leave a YML anchor in case we need to override or add more variables if
    # needed on each app service:
    environment: &app_environment
      # We'll set the DATABASE_URL environment variable for the app to connect
      # to our postgres container - no need to use a 'config/database.yml' file.
      DATABASE_URL: postgres://postgres:3x4mpl3P455w0rd@postgres:5432/

      # We'll set the RAILS_ENV and RACK_ENV environment variables to
      # 'development', so our app containers will start in 'development' mode
      # on this compose project:
      RAILS_ENV: development
      RACK_ENV: development
      RAILS_LOG_TO_STDOUT: "true"
      MAILER_HOST: localhost
      MAILER_PORT: 3000
      LISTEN_USE_POLLING: ${COOKPENDIUM_LISTEN_USE_POLLING:-no}
      OPENAI_API_KEY: ${OPENAI_API_KEY:-S0M3_F4K3_4P1_K3Y}
      STORAGE_ACCESS_KEY_ID: ${STORAGE_ACCESS_KEY_ID}
      STORAGE_SECRET_ACCESS_KEY: ${STORAGE_SECRET_ACCESS_KEY}
      STORAGE_REGION: eu-central-1
      STORAGE_BUCKET_NAME: ${STORAGE_BUCKET_NAME:-cookpendium}
      STORAGE_ENDPOINT_URL: http://minio:9000
      # REDIS_URL: redis://redis:6379/1

  web:
    <<: *app
    command: rails server -p 3000 -b 0.0.0.0
    environment:
      <<: *app_environment
    ports:
      - ${COOKPENDIUM_WEB_PORT:-3000}:3000
    depends_on:
      - postgres
      - esbuild
      - css_watch
      - minio
      # - redis
      # - worker

  # This container autocompiles and serves JS assets for our development environment.
  # The assets are served on the shared context for the web container to consume. No port allocation needed.
  esbuild:
    image: node
    command: yarn build --watch=forever
    working_dir: /usr/src/app
    volumes:
      - .:/usr/src/app
      - app_node_modules:/usr/src/node_modules

  # This container autocompiles and serves CSS assets for our development environment.
  # The assets are served on the shared context for the web container to consume. No port allocation needed.
  css_watch:
    image: node
    command: yarn watch:css
    working_dir: /usr/src/app
    volumes:
      - .:/usr/src/app
      - app_node_modules:/usr/src/node_modules

  test:
    <<: *app
    command: bundle exec rspec
    ports:
      - ${COOKPENDIUM_WEB_PORT:-3001}:3001
    environment:
      <<: *app_environment
      RAILS_ENV: test
      RACK_ENV: test
      FDOC: 1 #Factory Doctor
      FPROF: 1 #Factory Prof
      RD_PROF: 1 #RSpec Dissect
      OPENAI_API_KEY: S0M3_F4K3_4P1_K3Y
    depends_on:
      - postgres

  minio:
    image: minio/minio
    ports:
      - "${MINIO_PORT:-9000}:9000"
      - "9001:9001"
    volumes:
      - minio_data:/data
      - "./bin/minio-entrypoint:/usr/bin/minio-entrypoint"
    entrypoint: "/usr/bin/minio-entrypoint"
    command: server --console-address :9001 /data
    networks:
      - backend
    depends_on:
      - minio_setup
    env_file: .env
    environment: &minio_env
      MINIO_ROOT_USER: ${STORAGE_ACCESS_KEY_ID}
      MINIO_ROOT_PASSWORD: ${STORAGE_SECRET_ACCESS_KEY}
      STORAGE_BUCKET_NAME: ${STORAGE_BUCKET_NAME:-cookpendium}

  # We'll use a run-once service to configure the minio server:
  minio_setup:
    image: minio/mc
    volumes:
      - ./bin/minio-setup.sh:/usr/bin/setup
    entrypoint: ["/bin/sh", "-c"]
    command: setup
    environment: *minio_env
    networks:
      - backend

  # worker:
  #   <<: *app
  #   command: sidekiq -c 1
  #   environment:
  #     <<: *app_environment
  #     REDIS_URL: redis://redis:6379/1
  #     RAILS_ENV: development
  #     RACK_ENV: development
  #     RAILS_LOG_TO_STDOUT: "true"
  #     EXPORTER_HOST: "web:3000"
